# Generated by Django 5.1.6 on 2025-06-19 21:07

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('first_name', models.CharField(blank=True, max_length=150)),
                ('last_name', models.CharField(blank=True, max_length=150)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, related_name='customuser_groups', related_query_name='customuser', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='customuser_permissions', related_query_name='customuser', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the company (UUID).', primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='The official name of the company (must be unique).', max_length=255, unique=True)),
                ('slug', models.SlugField(blank=True, help_text='URL-friendly identifier for the company (optional, unique).', unique=True)),
                ('description', models.TextField(blank=True, help_text="A brief description of the company's purpose, services, or industry.", null=True)),
                ('industry', models.CharField(blank=True, help_text='The industry the company operates in (e.g., tech, healthcare, finance).', max_length=100)),
                ('website', models.URLField(blank=True, help_text="The company's official website URL.", null=True)),
                ('logo', models.ImageField(blank=True, help_text="The company's logo for branding purposes.", null=True, upload_to='company_logos/')),
                ('email', models.EmailField(blank=True, help_text="The company's primary contact email.", max_length=254, null=True)),
                ('phone_number', models.CharField(blank=True, help_text="The company's primary phone number.", max_length=20, null=True)),
                ('address', models.TextField(blank=True, help_text="The company's physical or mailing address.", null=True)),
                ('tax_id', models.CharField(blank=True, help_text="The company's tax identification number or Employer Identification Number (EIN).", max_length=50, null=True)),
                ('registration_number', models.CharField(blank=True, help_text="The company's registration number (e.g., for incorporation or business licenses).", max_length=50, null=True)),
                ('founded_date', models.DateField(blank=True, help_text='The date the company was founded.', null=True)),
                ('country', models.CharField(blank=True, help_text='The country or region where the company is registered.', max_length=100)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('suspended', 'Suspended')], default='active', help_text='The operational status of the company (e.g., active, inactive, suspended).', max_length=20)),
                ('is_verified', models.BooleanField(default=False, help_text='Indicates if the company has been verified by the system.')),
                ('verification_date', models.DateTimeField(blank=True, help_text='The date when the company was verified.', null=True)),
                ('employee_count', models.PositiveIntegerField(blank=True, help_text='The number of employees in the company.', null=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the company was soft-deleted.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the company record was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the company record was last updated.')),
                ('created_by', models.ForeignKey(help_text='The user who created the company record.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_companies', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(help_text='The user who owns this company.', on_delete=django.db.models.deletion.CASCADE, related_name='companies', to=settings.AUTH_USER_MODEL)),
                ('parent_company', models.ForeignKey(blank=True, help_text='The parent company, if this company is a subsidiary (self-referential).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subsidiaries', to='accounts.company')),
            ],
            options={
                'verbose_name': 'Company',
                'verbose_name_plural': 'Companies',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CompanyDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_type', models.CharField(choices=[('contract', 'Contract'), ('agreement', 'Agreement'), ('report', 'Report')], help_text='Type of document', max_length=50)),
                ('document_category', models.CharField(choices=[('legal', 'Legal'), ('financial', 'Financial'), ('operational', 'Operational'), ('hr', 'Human Resources'), ('marketing', 'Marketing'), ('other', 'Other')], default='other', help_text='Category of the document', max_length=50)),
                ('document_file', models.FileField(help_text='The document file', upload_to='company_documents/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when document was uploaded')),
                ('expires_at', models.DateTimeField(blank=True, help_text='Date when the document expires (optional)', null=True)),
                ('is_expired', models.BooleanField(default=False, help_text='Indicates if the document has expired')),
                ('notification_sent', models.JSONField(default=dict, help_text="Tracks notification stages that have been sent (e.g., {'7': true, '3': false})")),
                ('notification_attempts', models.JSONField(default=dict, help_text='Tracks notification attempt counts for each stage')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='accounts.company')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='CompanyInvitation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invited_email', models.EmailField(max_length=254)),
                ('role', models.CharField(choices=[('owner', 'Owner'), ('admin', 'Admin'), ('manager', 'Manager'), ('user', 'User')], max_length=20)),
                ('token', models.CharField(max_length=64, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('accepted', models.BooleanField(default=False)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.company')),
                ('invited_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CompanyUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('owner', 'Owner'), ('admin', 'Admin'), ('manager', 'Manager'), ('user', 'User')], max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='company_users', to='accounts.company')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(max_length=50)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('details', models.JSONField()),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='accounts_audit_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['action', 'timestamp'], name='accounts_au_action_11cc52_idx'), models.Index(fields=['user'], name='accounts_au_user_id_2e9d8e_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='company',
            index=models.Index(fields=['name', 'slug'], name='accounts_co_name_7caad4_idx'),
        ),
        migrations.AddIndex(
            model_name='company',
            index=models.Index(fields=['owner'], name='accounts_co_owner_i_e6e42b_idx'),
        ),
        migrations.AddIndex(
            model_name='company',
            index=models.Index(fields=['deleted_at'], name='accounts_co_deleted_80822d_idx'),
        ),
        migrations.AddIndex(
            model_name='companydocument',
            index=models.Index(fields=['expires_at'], name='accounts_co_expires_d1509b_idx'),
        ),
        migrations.AddIndex(
            model_name='companydocument',
            index=models.Index(fields=['is_expired'], name='accounts_co_is_expi_5e1c75_idx'),
        ),
        migrations.AddIndex(
            model_name='companydocument',
            index=models.Index(fields=['document_category'], name='accounts_co_documen_29e927_idx'),
        ),
        migrations.AddIndex(
            model_name='companydocument',
            index=models.Index(fields=['uploaded_at'], name='accounts_co_uploade_2248a1_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='companyuser',
            unique_together={('company', 'user')},
        ),
    ]
